// source: proto/types/transaction_log.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.iotextypes.TransactionLog', null, global);
goog.exportSymbol('proto.iotextypes.TransactionLog.Transaction', null, global);
goog.exportSymbol('proto.iotextypes.TransactionLogType', null, global);
goog.exportSymbol('proto.iotextypes.TransactionLogs', null, global);
goog.exportSymbol('proto.iotextypes.TransactionStructLog', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.TransactionLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iotextypes.TransactionLog.repeatedFields_, null);
};
goog.inherits(proto.iotextypes.TransactionLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iotextypes.TransactionLog.displayName = 'proto.iotextypes.TransactionLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.TransactionLog.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iotextypes.TransactionLog.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iotextypes.TransactionLog.Transaction.displayName = 'proto.iotextypes.TransactionLog.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.TransactionLogs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iotextypes.TransactionLogs.repeatedFields_, null);
};
goog.inherits(proto.iotextypes.TransactionLogs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iotextypes.TransactionLogs.displayName = 'proto.iotextypes.TransactionLogs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotextypes.TransactionStructLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.iotextypes.TransactionStructLog.repeatedFields_, null);
};
goog.inherits(proto.iotextypes.TransactionStructLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.iotextypes.TransactionStructLog.displayName = 'proto.iotextypes.TransactionStructLog';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iotextypes.TransactionLog.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.TransactionLog.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.TransactionLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.TransactionLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.TransactionLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionhash: msg.getActionhash_asB64(),
    numtransactions: jspb.Message.getFieldWithDefault(msg, 2, 0),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.iotextypes.TransactionLog.Transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.TransactionLog}
 */
proto.iotextypes.TransactionLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.TransactionLog;
  return proto.iotextypes.TransactionLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.TransactionLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.TransactionLog}
 */
proto.iotextypes.TransactionLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setActionhash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumtransactions(value);
      break;
    case 3:
      var value = new proto.iotextypes.TransactionLog.Transaction;
      reader.readMessage(value,proto.iotextypes.TransactionLog.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.TransactionLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.TransactionLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.TransactionLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.TransactionLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNumtransactions();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.iotextypes.TransactionLog.Transaction.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.TransactionLog.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.TransactionLog.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.TransactionLog.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.TransactionLog.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    topic: msg.getTopic_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sender: jspb.Message.getFieldWithDefault(msg, 3, ""),
    recipient: jspb.Message.getFieldWithDefault(msg, 4, ""),
    type: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.TransactionLog.Transaction}
 */
proto.iotextypes.TransactionLog.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.TransactionLog.Transaction;
  return proto.iotextypes.TransactionLog.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.TransactionLog.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.TransactionLog.Transaction}
 */
proto.iotextypes.TransactionLog.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTopic(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    case 5:
      var value = /** @type {!proto.iotextypes.TransactionLogType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.TransactionLog.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.TransactionLog.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.TransactionLog.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.TransactionLog.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTopic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional bytes topic = 1;
 * @return {string}
 */
proto.iotextypes.TransactionLog.Transaction.prototype.getTopic = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes topic = 1;
 * This is a type-conversion wrapper around `getTopic()`
 * @return {string}
 */
proto.iotextypes.TransactionLog.Transaction.prototype.getTopic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTopic()));
};


/**
 * optional bytes topic = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTopic()`
 * @return {!Uint8Array}
 */
proto.iotextypes.TransactionLog.Transaction.prototype.getTopic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTopic()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.iotextypes.TransactionLog.Transaction} returns this
 */
proto.iotextypes.TransactionLog.Transaction.prototype.setTopic = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.iotextypes.TransactionLog.Transaction.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.iotextypes.TransactionLog.Transaction} returns this
 */
proto.iotextypes.TransactionLog.Transaction.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sender = 3;
 * @return {string}
 */
proto.iotextypes.TransactionLog.Transaction.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.iotextypes.TransactionLog.Transaction} returns this
 */
proto.iotextypes.TransactionLog.Transaction.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string recipient = 4;
 * @return {string}
 */
proto.iotextypes.TransactionLog.Transaction.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.iotextypes.TransactionLog.Transaction} returns this
 */
proto.iotextypes.TransactionLog.Transaction.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional TransactionLogType type = 5;
 * @return {!proto.iotextypes.TransactionLogType}
 */
proto.iotextypes.TransactionLog.Transaction.prototype.getType = function() {
  return /** @type {!proto.iotextypes.TransactionLogType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.iotextypes.TransactionLogType} value
 * @return {!proto.iotextypes.TransactionLog.Transaction} returns this
 */
proto.iotextypes.TransactionLog.Transaction.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional bytes actionHash = 1;
 * @return {string}
 */
proto.iotextypes.TransactionLog.prototype.getActionhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes actionHash = 1;
 * This is a type-conversion wrapper around `getActionhash()`
 * @return {string}
 */
proto.iotextypes.TransactionLog.prototype.getActionhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getActionhash()));
};


/**
 * optional bytes actionHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getActionhash()`
 * @return {!Uint8Array}
 */
proto.iotextypes.TransactionLog.prototype.getActionhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getActionhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.iotextypes.TransactionLog} returns this
 */
proto.iotextypes.TransactionLog.prototype.setActionhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 numTransactions = 2;
 * @return {number}
 */
proto.iotextypes.TransactionLog.prototype.getNumtransactions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.iotextypes.TransactionLog} returns this
 */
proto.iotextypes.TransactionLog.prototype.setNumtransactions = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Transaction transactions = 3;
 * @return {!Array<!proto.iotextypes.TransactionLog.Transaction>}
 */
proto.iotextypes.TransactionLog.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.iotextypes.TransactionLog.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.iotextypes.TransactionLog.Transaction, 3));
};


/**
 * @param {!Array<!proto.iotextypes.TransactionLog.Transaction>} value
 * @return {!proto.iotextypes.TransactionLog} returns this
*/
proto.iotextypes.TransactionLog.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.iotextypes.TransactionLog.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.iotextypes.TransactionLog.Transaction}
 */
proto.iotextypes.TransactionLog.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.iotextypes.TransactionLog.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.iotextypes.TransactionLog} returns this
 */
proto.iotextypes.TransactionLog.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iotextypes.TransactionLogs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.TransactionLogs.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.TransactionLogs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.TransactionLogs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.TransactionLogs.toObject = function(includeInstance, msg) {
  var f, obj = {
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.iotextypes.TransactionLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.TransactionLogs}
 */
proto.iotextypes.TransactionLogs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.TransactionLogs;
  return proto.iotextypes.TransactionLogs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.TransactionLogs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.TransactionLogs}
 */
proto.iotextypes.TransactionLogs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.iotextypes.TransactionLog;
      reader.readMessage(value,proto.iotextypes.TransactionLog.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.TransactionLogs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.TransactionLogs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.TransactionLogs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.TransactionLogs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.iotextypes.TransactionLog.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TransactionLog logs = 1;
 * @return {!Array<!proto.iotextypes.TransactionLog>}
 */
proto.iotextypes.TransactionLogs.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.iotextypes.TransactionLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.iotextypes.TransactionLog, 1));
};


/**
 * @param {!Array<!proto.iotextypes.TransactionLog>} value
 * @return {!proto.iotextypes.TransactionLogs} returns this
*/
proto.iotextypes.TransactionLogs.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.iotextypes.TransactionLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.iotextypes.TransactionLog}
 */
proto.iotextypes.TransactionLogs.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.iotextypes.TransactionLog, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.iotextypes.TransactionLogs} returns this
 */
proto.iotextypes.TransactionLogs.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.iotextypes.TransactionStructLog.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotextypes.TransactionStructLog.prototype.toObject = function(opt_includeInstance) {
  return proto.iotextypes.TransactionStructLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotextypes.TransactionStructLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.TransactionStructLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    pc: jspb.Message.getFieldWithDefault(msg, 1, 0),
    op: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gas: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gascost: jspb.Message.getFieldWithDefault(msg, 4, 0),
    memory: jspb.Message.getFieldWithDefault(msg, 5, ""),
    memsize: jspb.Message.getFieldWithDefault(msg, 6, 0),
    stackList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    returndata: jspb.Message.getFieldWithDefault(msg, 8, ""),
    depth: jspb.Message.getFieldWithDefault(msg, 9, 0),
    refund: jspb.Message.getFieldWithDefault(msg, 10, 0),
    opname: jspb.Message.getFieldWithDefault(msg, 11, ""),
    error: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotextypes.TransactionStructLog}
 */
proto.iotextypes.TransactionStructLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotextypes.TransactionStructLog;
  return proto.iotextypes.TransactionStructLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotextypes.TransactionStructLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotextypes.TransactionStructLog}
 */
proto.iotextypes.TransactionStructLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPc(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGascost(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemory(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMemsize(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addStack(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setReturndata(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDepth(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRefund(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setOpname(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotextypes.TransactionStructLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotextypes.TransactionStructLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotextypes.TransactionStructLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotextypes.TransactionStructLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPc();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getGascost();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMemory();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMemsize();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getStackList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getReturndata();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDepth();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getRefund();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getOpname();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional uint64 pc = 1;
 * @return {number}
 */
proto.iotextypes.TransactionStructLog.prototype.getPc = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.setPc = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 op = 2;
 * @return {number}
 */
proto.iotextypes.TransactionStructLog.prototype.getOp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.setOp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 gas = 3;
 * @return {number}
 */
proto.iotextypes.TransactionStructLog.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.setGas = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 gasCost = 4;
 * @return {number}
 */
proto.iotextypes.TransactionStructLog.prototype.getGascost = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.setGascost = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string memory = 5;
 * @return {string}
 */
proto.iotextypes.TransactionStructLog.prototype.getMemory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.setMemory = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 memSize = 6;
 * @return {number}
 */
proto.iotextypes.TransactionStructLog.prototype.getMemsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.setMemsize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated string stack = 7;
 * @return {!Array<string>}
 */
proto.iotextypes.TransactionStructLog.prototype.getStackList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.setStackList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.addStack = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.clearStackList = function() {
  return this.setStackList([]);
};


/**
 * optional string returnData = 8;
 * @return {string}
 */
proto.iotextypes.TransactionStructLog.prototype.getReturndata = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.setReturndata = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 depth = 9;
 * @return {number}
 */
proto.iotextypes.TransactionStructLog.prototype.getDepth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.setDepth = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 refund = 10;
 * @return {number}
 */
proto.iotextypes.TransactionStructLog.prototype.getRefund = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.setRefund = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string opName = 11;
 * @return {string}
 */
proto.iotextypes.TransactionStructLog.prototype.getOpname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.setOpname = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string error = 12;
 * @return {string}
 */
proto.iotextypes.TransactionStructLog.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.iotextypes.TransactionStructLog} returns this
 */
proto.iotextypes.TransactionStructLog.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * @enum {number}
 */
proto.iotextypes.TransactionLogType = {
  IN_CONTRACT_TRANSFER: 0,
  WITHDRAW_BUCKET: 1,
  CREATE_BUCKET: 2,
  DEPOSIT_TO_BUCKET: 3,
  CANDIDATE_SELF_STAKE: 4,
  CANDIDATE_REGISTRATION_FEE: 5,
  GAS_FEE: 6,
  NATIVE_TRANSFER: 7,
  DEPOSIT_TO_REWARDING_FUND: 8,
  CLAIM_FROM_REWARDING_FUND: 9
};

goog.object.extend(exports, proto.iotextypes);
