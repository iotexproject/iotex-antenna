/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.iotexrpc.BlockSync', null, global);
goog.exportSymbol('proto.iotexrpc.BroadcastMsg', null, global);
goog.exportSymbol('proto.iotexrpc.MessageType', null, global);
goog.exportSymbol('proto.iotexrpc.UnicastMsg', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotexrpc.BlockSync = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iotexrpc.BlockSync, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iotexrpc.BlockSync.displayName = 'proto.iotexrpc.BlockSync';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotexrpc.BlockSync.prototype.toObject = function(opt_includeInstance) {
  return proto.iotexrpc.BlockSync.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotexrpc.BlockSync} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexrpc.BlockSync.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: jspb.Message.getFieldWithDefault(msg, 2, 0),
    end: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotexrpc.BlockSync}
 */
proto.iotexrpc.BlockSync.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotexrpc.BlockSync;
  return proto.iotexrpc.BlockSync.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotexrpc.BlockSync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotexrpc.BlockSync}
 */
proto.iotexrpc.BlockSync.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotexrpc.BlockSync.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotexrpc.BlockSync.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotexrpc.BlockSync} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexrpc.BlockSync.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEnd();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional uint64 start = 2;
 * @return {number}
 */
proto.iotexrpc.BlockSync.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.iotexrpc.BlockSync.prototype.setStart = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 end = 3;
 * @return {number}
 */
proto.iotexrpc.BlockSync.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.iotexrpc.BlockSync.prototype.setEnd = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotexrpc.BroadcastMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iotexrpc.BroadcastMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iotexrpc.BroadcastMsg.displayName = 'proto.iotexrpc.BroadcastMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotexrpc.BroadcastMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.iotexrpc.BroadcastMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotexrpc.BroadcastMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexrpc.BroadcastMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    msgType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    msgBody: msg.getMsgBody_asB64(),
    peerId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotexrpc.BroadcastMsg}
 */
proto.iotexrpc.BroadcastMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotexrpc.BroadcastMsg;
  return proto.iotexrpc.BroadcastMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotexrpc.BroadcastMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotexrpc.BroadcastMsg}
 */
proto.iotexrpc.BroadcastMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {!proto.iotexrpc.MessageType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgBody(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotexrpc.BroadcastMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotexrpc.BroadcastMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotexrpc.BroadcastMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexrpc.BroadcastMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMsgType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMsgBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 chain_id = 1;
 * @return {number}
 */
proto.iotexrpc.BroadcastMsg.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iotexrpc.BroadcastMsg.prototype.setChainId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional MessageType msg_type = 2;
 * @return {!proto.iotexrpc.MessageType}
 */
proto.iotexrpc.BroadcastMsg.prototype.getMsgType = function() {
  return /** @type {!proto.iotexrpc.MessageType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.iotexrpc.MessageType} value */
proto.iotexrpc.BroadcastMsg.prototype.setMsgType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bytes msg_body = 3;
 * @return {string}
 */
proto.iotexrpc.BroadcastMsg.prototype.getMsgBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes msg_body = 3;
 * This is a type-conversion wrapper around `getMsgBody()`
 * @return {string}
 */
proto.iotexrpc.BroadcastMsg.prototype.getMsgBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgBody()));
};


/**
 * optional bytes msg_body = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgBody()`
 * @return {!Uint8Array}
 */
proto.iotexrpc.BroadcastMsg.prototype.getMsgBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.iotexrpc.BroadcastMsg.prototype.setMsgBody = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string peer_id = 4;
 * @return {string}
 */
proto.iotexrpc.BroadcastMsg.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.iotexrpc.BroadcastMsg.prototype.setPeerId = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.iotexrpc.BroadcastMsg.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.iotexrpc.BroadcastMsg.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.iotexrpc.BroadcastMsg.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iotexrpc.BroadcastMsg.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.iotexrpc.UnicastMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.iotexrpc.UnicastMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.iotexrpc.UnicastMsg.displayName = 'proto.iotexrpc.UnicastMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.iotexrpc.UnicastMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.iotexrpc.UnicastMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.iotexrpc.UnicastMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexrpc.UnicastMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    addr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    msgType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    msgBody: msg.getMsgBody_asB64(),
    peerId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.iotexrpc.UnicastMsg}
 */
proto.iotexrpc.UnicastMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.iotexrpc.UnicastMsg;
  return proto.iotexrpc.UnicastMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.iotexrpc.UnicastMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.iotexrpc.UnicastMsg}
 */
proto.iotexrpc.UnicastMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddr(value);
      break;
    case 3:
      var value = /** @type {!proto.iotexrpc.MessageType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgBody(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.iotexrpc.UnicastMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.iotexrpc.UnicastMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.iotexrpc.UnicastMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.iotexrpc.UnicastMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMsgType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMsgBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 chain_id = 1;
 * @return {number}
 */
proto.iotexrpc.UnicastMsg.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.iotexrpc.UnicastMsg.prototype.setChainId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string addr = 2;
 * @return {string}
 */
proto.iotexrpc.UnicastMsg.prototype.getAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.iotexrpc.UnicastMsg.prototype.setAddr = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional MessageType msg_type = 3;
 * @return {!proto.iotexrpc.MessageType}
 */
proto.iotexrpc.UnicastMsg.prototype.getMsgType = function() {
  return /** @type {!proto.iotexrpc.MessageType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.iotexrpc.MessageType} value */
proto.iotexrpc.UnicastMsg.prototype.setMsgType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes msg_body = 4;
 * @return {string}
 */
proto.iotexrpc.UnicastMsg.prototype.getMsgBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes msg_body = 4;
 * This is a type-conversion wrapper around `getMsgBody()`
 * @return {string}
 */
proto.iotexrpc.UnicastMsg.prototype.getMsgBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgBody()));
};


/**
 * optional bytes msg_body = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgBody()`
 * @return {!Uint8Array}
 */
proto.iotexrpc.UnicastMsg.prototype.getMsgBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.iotexrpc.UnicastMsg.prototype.setMsgBody = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string peer_id = 5;
 * @return {string}
 */
proto.iotexrpc.UnicastMsg.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.iotexrpc.UnicastMsg.prototype.setPeerId = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.iotexrpc.UnicastMsg.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.iotexrpc.UnicastMsg.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.iotexrpc.UnicastMsg.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.iotexrpc.UnicastMsg.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.iotexrpc.MessageType = {
  UNKNOWN: 0,
  ACTION: 1,
  BLOCK: 2,
  CONSENSUS: 3,
  BLOCK_REQUEST: 4,
  TEST: 10001
};

goog.object.extend(exports, proto.iotexrpc);
